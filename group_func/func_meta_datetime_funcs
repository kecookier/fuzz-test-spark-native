// 自动生成的函数元数据 - datetime_funcs
val functionMetas = Seq(
  FunctionWithSignature("add_months", 3) => FunctionMeta(add_months, 3, WrappedArray(Expression, Expression, boolean), datetime_funcs),
  Function("add_months", 2),
  FunctionWithSignature("current_date", 1) => FunctionMeta(current_date, 1, WrappedArray(Option), datetime_funcs),
  Function("current_date", 0),
  Function("current_timestamp", 0),
  Function("date_add", 2),
  FunctionWithSignature("date_format", 3) => FunctionMeta(date_format, 3, WrappedArray(Expression, Expression, Option), datetime_funcs),
  Function("date_format", 2),
  Function("date_part", 2),
  Function("date_sub", 2),
  FunctionWithSignature("date_trunc", 3) => FunctionMeta(date_trunc, 3, WrappedArray(Expression, Expression, Option), datetime_funcs),
  Function("date_trunc", 2),
  Function("datediff", 2),
  Function("day", 1),
  Function("dayofmonth", 1),
  Function("dayofweek", 1),
  Function("dayofyear", 1),
  Function("extract", 2),
  FunctionWithSignature("from_unixtime", 3) => FunctionMeta(from_unixtime, 3, WrappedArray(Expression, Expression, Option), datetime_funcs),
  Function("from_unixtime", 2),
  Function("from_unixtime", 1),
  Function("from_utc_timestamp", 2),
  Function("hour", 1),
  FunctionWithSignature("hour", 2) => FunctionMeta(hour, 2, WrappedArray(Expression, Option), datetime_funcs),
  Function("last_day", 1),
  Function("make_date", 3),
  Function("make_interval", 4),
  Function("make_interval", 3),
  Function("make_interval", 2),
  Function("make_interval", 1),
  Function("make_interval", 0),
  Function("make_interval", 7),
  Function("make_interval", 6),
  Function("make_interval", 5),
  Function("make_timestamp", 6),
  FunctionWithSignature("make_timestamp", 8) => FunctionMeta(make_timestamp, 8, WrappedArray(Expression, Expression, Expression, Expression, Expression, Expression, Option, Option), datetime_funcs),
  Function("make_timestamp", 7),
  Function("minute", 1),
  FunctionWithSignature("minute", 2) => FunctionMeta(minute, 2, WrappedArray(Expression, Option), datetime_funcs),
  Function("month", 1),
  FunctionWithSignature("months_between", 4) => FunctionMeta(months_between, 4, WrappedArray(Expression, Expression, Expression, Option), datetime_funcs),
  Function("months_between", 3),
  Function("months_between", 2),
  Function("next_day", 2),
  Function("now", 0),
  Function("quarter", 1),
  Function("second", 1),
  FunctionWithSignature("second", 2) => FunctionMeta(second, 2, WrappedArray(Expression, Option), datetime_funcs),
  Function("to_date", 1),
  Function("to_timestamp", 2),
  Function("to_timestamp", 1),
  Function("to_unix_timestamp", 2),
  FunctionWithSignature("to_unix_timestamp", 3) => FunctionMeta(to_unix_timestamp, 3, WrappedArray(Expression, Expression, Option), datetime_funcs),
  Function("to_unix_timestamp", 1),
  Function("to_utc_timestamp", 2),
  Function("trunc", 2),
  Function("unix_timestamp", 0),
  FunctionWithSignature("unix_timestamp", 3) => FunctionMeta(unix_timestamp, 3, WrappedArray(Expression, Expression, Option), datetime_funcs),
  Function("unix_timestamp", 2),
  Function("unix_timestamp", 1),
  Function("weekday", 1),
  Function("weekofyear", 1),
  Function("window", 4),
  FunctionWithSignature("window", 4) => FunctionMeta(window, 4, WrappedArray(Expression, long, long, long), datetime_funcs),
  Function("window", 3),
  Function("window", 2),
  Function("year", 1)
)
